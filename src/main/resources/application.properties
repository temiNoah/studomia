#spring.datasource.url=jdbc:mysql://localhost:3306/studomiaDB?useSSL=false&serverTimezone=UTC&useLegacyDatetimeCode=false
#spring.datasource.username=root
#spring.datasource.password=08158422923temi
#spring.jpa.generate-ddl=true
#spring.jpa.show-sql=true
#spring.datasource.driverClassName=com.mysql.jdbc.Driver
#spring.jpa.properties.hibernate.format_sql=true
#spring.datasource.max.connection.pool.size=2

#################################h2 in memory dd
###########for the h2 in-memory if the app restarts records are lost so we can use the other
##note on the UI set field "JDBC URL : jdbc:h2:mem:testdb" for in memory
##but for file set the field "JDBC URL : jdbc:h2:file:./data/testdb"
## reference : https://www.youtube.com/watch?v=9ME94z46fsU
spring.datasource.url=jdbc:h2:mem:testdb 
#spring.datasource.url=jdbc:h2:file:./data/testdb
#spring.datasource.url=jdbc:h2:file:C:/data/sampledata for windows users
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#accessing the h2 console
spring.h2.console.enabled=true


spring.jpa.hibernate.ddl-auto=update
#create , create-drop , validate ,update
######################################################################


############Spring automatic action on database
#Spring Boot will automatically pick up the data.sql and run it against our configured H2 database
spring.application.name=studomia service
#logging.level.=ERROR
#logging.file=${java.io.tmpdir}/${spring.application.name}.log
#debug=true
#spring.show-sql=true
logging.level.org.springframework.web.client.RestTemplate: DEBUG


app.name=studomia
app.description=${app.name} is a Spring Boot application for e-learning
app.baseUrl=https://studomia.herokuapp.com
#app.baseUrl=http://localhost:8080
app.on.auth.success.redirect.path=/profile

################################social login credentials
######################GOOGLE
spring.security.oauth2.client.registration.google.clientId=115475990538-6d7lrun2ul9mfp8vj2aok5lausk3bigq.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.clientSecret=2c0d9IVJtKoxqwPLQUZV1T_6
spring.security.oauth2.client.registration.google.redirect-uri=${app.baseUrl}/oauth2/callback/google

####################facebook
spring.security.oauth2.client.registration.facebook.clientId=115475990538-6d7lrun2ul9mfp8vj2aok5lausk3bigq.apps.googleusercontent.com
spring.security.oauth2.client.registration.facebook.clientSecret=2c0d9IVJtKoxqwPLQUZV1T_6
spring.security.oauth2.client.registration.facebook.redirect-uri=${app.baseUrl}/oauth2/callback/google


spring.security.oauth2.client.registration.github.clientId=79a6f7192eea12d68fb2
spring.security.oauth2.client.registration.github.clientSecret=fc77ce24b08029df511f33b6661f54968d4b054d
spring.security.oauth2.client.registration.github.redirectUri=${app.baseUrl}/oauth2/callback/github


######################twitter

########################github



##############################ALLOWED ORIGINS
cors.allowed.origins=http://localhost:3003,https://toshihiro.herokuapp.com

#JWT properties
app.jwt.header=Authorization
app.jwt.header.prefix=Bearer 
app.jwt.secret=mySecret
#20 x 60 seconds = 20min
app.jwt.expiration=20000
app.jwt.claims.refresh.name=Refresh

app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
app.auth.tokenExpirationMsec=864000000
app.auth.refreshExpirationDateInMs=9000000

#Token properties
app.token.email.verification.duration=3600000
app.token.password.reset.duration=3600000
app.token.refresh.duration=2592000000
app.velocity.templates.location=/templates/


app.oauth2.authorizedRedirectUris=http://localhost:3000/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the client in the /oauth2/authorize request.
# We're not using cookies because they won't work well in mobile clients.